<?php

namespace app\models;

use Yii;
use yii\data\Pagination;
use yii\db\ActiveRecord;
use yii\helpers\ArrayHelper;

/**
 * This is the model class for table "article".
 *
 * @property integer $id
 * @property string $title
 * @property string $description
 * @property string $content
 * @property string $date
 * @property string $image
 * @property integer $viewed
 * @property integer $user_id
 * @property integer $status
 * @property integer $category_id
 *
 * @property ArticleTag[] $articleTags
 * @property Comment[] $comments
 */
class Article extends ActiveRecord
{
    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'article';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['title'], 'required'],
            [['title','description', 'content'], 'string'],
            [['date'], 'date', 'format' => 'php:Y-m-d'],
            [['date'], 'default', 'value' => date('Y-m-d')],
            [['title'], 'string', 'max' => 255],
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'title' => 'Title',
            'description' => 'Description',
            'content' => 'Content',
            'date' => 'Date',
            'image' => 'Image',
            'viewed' => 'Viewed',
            'user_id' => 'User ID',
            'status' => 'Status',
            'category_id' => 'Category ID',
        ];
    }


    public function saveImage($filename){
        $this->image = $filename;
        return $this->save(false);
    }

    public function deleteImage(){
        $imageUploadFile  = new ImageUpload();
        $imageUploadFile->deleteCurrentImage($this->image);
    }

    public function beforeDelete()
    {
        $this->deleteImage();
        return parent::beforeDelete(); // TODO: Change the autogenerated stub
    }

    public function getImage(){
        return ($this->image) ? '/web/uploads/' . $this->image : '/web/uploads/no-image.jpg';
    }

    public function getCategory()
    {
        return $this->hasOne(Category::className(), ['id' => 'category_id']);
    }

    public function saveCategory($category_id){
        $category = Category::findOne($category_id);
        if($category != null){
            $this->link('category', $category);
            return true;
        }
    }


    public function getTags()
    {
        return $this->hasMany(Tag::className(), ['id' => 'tag_id'])
            ->viaTable('article_tag', ['article_id' => 'id']);
    }

    public function getSelectedTags()
    {
        $selectedIds = $this->getTags()->select('id')->asArray()->all();
        return ArrayHelper::getColumn($selectedIds, 'id');
    }

    public function saveTags($tags){
        if(is_array($tags)){
            $this->clearCurrentTags();
            foreach ($tags as $tag_id){
                $tag = Tag::findOne($tag_id);
                $this->link('tags', $tag);
            }
        }
    }
    public function clearCurrentTags(){
        ArticleTag::deleteAll(['article_id' => $this->id]);
    }

    public static function getNews($pages = 4, $category_id){
        $query = Article::find()->where(['category_id' => $category_id]);
        $countQuery = clone $query;
        $pages = new Pagination(['totalCount' => $countQuery->count(), 'pageSize' => $pages]);
        $articles = $query->offset($pages->offset)
            ->limit($pages->limit)
            ->orderBy('date DESC')
            ->all();
        $data['articles'] = $articles;
        $data['pages'] = $pages;
        return $data;
    }


    public static function getLatestNews(){
        $query = Article::find()->where(['category_id' => 1]);
        $articles = $query
            ->limit(4)
            ->orderBy(['date'=>SORT_DESC])
            ->all();
        return $articles;
    }

    public static function getRelatedPosts($id)
    {
        $query = Article::find()->where(['category_id' => Article::findOne($id)->category_id]);
        $relatedPosts = $query
            ->limit(4)
            ->orderBy(['date'=>SORT_DESC])
            ->all();
        return $relatedPosts;
    }

    public function getDate(){
        $date = $this->date;
        $day = date("d", strtotime($date));
        $month = $this->getRussianMonth(date("m", strtotime($date)));
        $year = date("Y", strtotime($date));
        return $day.' '.$month.' '.$year ;

//        setlocale(LC_ALL,'ru_RU.CP1251','ru_RU','rus');
//        $mounth = strftime("%d %B %Y", strtotime($this->date));
//        return iconv('Windows-1251','utf-8', $mounth);
    }

    public function getRussianMonth($month){
        switch ($month){
            case 1:
                return 'Января';
                break;
            case 2:
                return 'Февраля';
                break;
            case 3:
                return 'Марта';
                break;
            case 4:
                return 'Апреля';
                break;
            case 5:
                return 'Мая';
                break;
            case 6:
                return 'Июня';
                break;
            case 7:
                return 'Июля';
                break;
            case 8:
                return 'Августа';
                break;
            case 9:
                return 'Сентября';
                break;
            case 10:
                return 'Октября';
                break;
            case 11:
                return 'Ноября';
                break;
            case 12:
                return 'Декабря';
                break;
            default:
                return 'Нет такого месяца';
        }
    }

    public function saveArticle()
    {
        $this->user_id = Yii::$app->user->getId();
        return $this->save();
    }

    public function getComments(){
        return $this->hasMany(Comment::className(), ['article_id' => 'id']);
    }


    public function getArticleComments()
    {
        return $this->getComments()->where(['status' => 1])->orderBy('date desc')->all();
    }

    public function viewedCounter(){
        $this->viewed += 1;
        return $this->save(false);
    }
    /**
     * @return \yii\db\ActiveQuery
     */
//    public function getArticleTags()
//    {
//        return $this->hasMany(ArticleTag::className(), ['article_id' => 'id']);
//    }
//
//    /**
//     * @return \yii\db\ActiveQuery
//     */
//    public function getComments()
//    {
//        return $this->hasMany(Comment::className(), ['article_id' => 'id']);
//    }


}
